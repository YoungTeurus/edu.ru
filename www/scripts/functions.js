const siteURL = "http://edu.ru";

// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã–º?
let isUserLogined = false;

const testsStatuses = {
    completed: {text: "‚òë –í—ã–ø–æ–ª–Ω–µ–Ω"},
    completedCanTryAgain: {text: "‚úî –í—ã–ø–æ–ª–Ω–µ–Ω, –¥–æ—Å—Ç—É–ø–µ–Ω"},
    completedInProgress: {text: "‚úî‚≠ï –í—ã–ø–æ–ª–Ω–µ–Ω, –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"},
    inProgress: {text: "‚≠ï –í –ø—Ä–æ—Ü–µ—Å—Å–µ"},
    available: {text: "‚ùî –î–æ—Å—Ç—É–ø–µ–Ω"},
    availableInTime: {text: "üîí –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω"},
    notAvailable: {text: "üîí –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω"},
}

const triesStasuses = {
    completed: {text: "‚úî –ó–∞–∫–æ–Ω—á–µ–Ω–∞"},
    inProgress: {text: "‚≠ï –í –ø—Ä–æ—Ü–µ—Å—Å–µ"},
}

const scoreRanges = {
    ranges: [0, 50, 75, 90, 100],
    0: "‚ùå",
    50: "‚ùó",
    75: "‚úî",
    90: "‚úÖ",
    100: "‚öú",
}

function ConnectException(message) {
    this.message = message;
    this.name = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º";
}

// –í—ã–∑—ã–≤–∞–µ—Ç ajax —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É url —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π data.
// –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç msg, –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ failException.
async function ajaxWithData(type, url, data, failException) {
    return $.ajax({
        type: type,
        url: url,
        data: data,
        dataType: "json",
    })
        .done(msg => {
            return (msg);
        })
        .fail(() => {
            throw failException;
        });
}

async function postAjax(url, data, failException) {
    return ajaxWithData('POST', url, data, failException);
}

// –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º.
async function logIntoAccount(userLogin, userPassword) {
    let data = {form: {}};
    data["form"]["action"] = "login";
    data["form"]["userLogin"] = userLogin;
    data["form"]["userPassword"] = userPassword;
    console.log(data);

    return postAjax(
        siteURL + '/login.php',
        data,
        new ConnectException("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞–∫—É–Ω—Ç!")
    );
}

// –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.
async function logOutOfAccount() {
    let data = {form: {}};
    data["form"]["action"] = "logout";
    console.log(data);

    return postAjax(
        siteURL + '/login.php',
        data,
        new ConnectException("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞–∫—É–Ω—Ç–∞!")
    );
}

// –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º.
async function registerAccount(userLogin, userPassword, userEmail) {
    let data = {form: {}};
    data["form"]["action"] = "register";
    data["form"]["userLogin"] = userLogin;
    data["form"]["userEmail"] = userEmail;
    data["form"]["userPassword"] = userPassword;
    $("#loginError").text("");  // –û—á–∏—â–∞–µ–º –∏–º–µ—é—â–∏–µ—Å—è –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞
    console.log(data);

    return postAjax(
        siteURL + '/login.php',
        data,
        new ConnectException("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∞–∫–∫–∞–∫—É–Ω—Ç!")
    );
}

// –í–æ–≤–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è userRegisterModal –≤–µ—Ä–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.
function validateRegisterForm() {
    let isCorrect = true;

    // –°–±—Ä–æ—Å –æ—à–∏–±–∫–∏ –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é:
    $("#ruserLoginValidation")
        .text("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ –ø–æ–ª–µ!");

    let rul = $("#ruserLogin");
    let rue = $("#ruserEmail");
    let rup = $("#ruserPassword");
    let rupa = $("#ruserPasswordAgain");

    if (rul.val().length === 0) {
        rul[0].classList.add('is-invalid');
        isCorrect = false;
    } else {
        rul[0].classList.remove('is-invalid');
    }

    if (rue.val().length === 0) {
        rue[0].classList.add('is-invalid');
        isCorrect = false;
    } else {
        rue[0].classList.remove('is-invalid');
    }

    if (rup.val().length === 0) {
        rup[0].classList.add('is-invalid');
        rupa[0].classList.add('is-invalid');
        isCorrect = false;
    } else {
        rup[0].classList.remove('is-invalid');
        if (rup.val() !== rupa.val()) {
            rupa[0].classList.add('is-invalid');
            isCorrect = false;
        } else {
            rupa[0].classList.remove('is-invalid');
        }
    }

    return isCorrect;
}

// –í–æ–≤–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è userLoginModal –≤–µ—Ä–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.
function validateLoginForm() {
    let isCorrect = true;

    // –°–±—Ä–æ—Å –æ—à–∏–±–∫–∏ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é:
    $("#luserPasswordValidation")
        .text("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ –ø–æ–ª–µ!");

    let lul = $("#luserLogin");
    let lup = $("#luserPassword");

    if (lul.val().length === 0) {
        lul[0].classList.add('is-invalid');
        isCorrect = false;
    } else {
        lul[0].classList.remove('is-invalid');
    }

    if (lup.val().length === 0) {
        lup[0].classList.add('is-invalid');
        isCorrect = false;
    } else {
        lup[0].classList.remove('is-invalid');
    }

    return isCorrect;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏–Ω–∞—á–µ - false.
async function checkUserLoginStatus() {
    let data = {form: {}};
    data["form"]["action"] = "checkLoginStatus";
    console.log(data);
    return $.ajax({
        type: "POST",
        url: siteURL + '/login.php',
        data: data,
        dataType: "json",
    })
        .done(msg => {
            return (msg["logined"]);
        })
        .fail(() => {
            throw new ConnectException("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É—Å—Ç–∞–Ω–æ–ª–≤–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞!");
        });
}

// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
async function getUserInfo() {
    let data = {form: {}};
    data["form"]["action"] = "getUserInfo";
    console.log(data);
    return postAjax(
        siteURL + '/login.php',
        data,
        new ConnectException("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ!")
    );
}

// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ—Å—Ç–∞—Ö.
async function getAvailableTests() {
    let data = {form: {}};
    data["form"]["action"] = "getAvailableTests";
    console.log(data);
    return postAjax(
        siteURL + '/tests.php',
        data,
        new ConnectException("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–∞–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤!")
    );
}

// –û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
function clearAvailableTests() {
    $("#availableTests tbody tr").remove();
}

// –î–æ–±–∞–≤–ª—è–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
function appendNewAvailableTest(testRowObject) {
    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:
    let _status = (testRowObject["isCompleted"] === "1" ? (
            testRowObject["inProgress"] === "1" ? (
                // –ï—Å–ª–∏ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Å–µ–π—á–∞—Å –∑–∞–ø—É—â–µ–Ω–∞ –µ—â—ë –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞:
                testsStatuses.completedInProgress
            ) : (
                // –ï—Å–ª–∏ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω:
                ((testRowObject["maxTries"] === "-1" || testRowObject["maxTries"] > testRowObject["usedTries"]) ?
                    // –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ –±–æ–ª—å—à–µ, —á–µ–º —Å–¥–µ–ª–∞–Ω–æ (–∏–ª–∏ –∏—Ö –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –º–Ω–æ–≥–æ):
                    testsStatuses.completedCanTryAgain :
                    // –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
                    testsStatuses.completed)
            )

        ) : (
            // –ï—Å–ª–∏ –µ—â—ë –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω:
            (testRowObject["usedTries"] > 0 ?
                    // –ï—Å–ª–∏ —Å–¥–µ–ª–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –∏ –æ–Ω–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞:
                    testsStatuses.inProgress :
                    // –ï—Å–ª–∏ –µ—â—ë –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ :
                    (
                        (testRowObject["openDatetime"] === null && testRowObject["closeDatetime"] === null) ?
                            // –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
                            testsStatuses.available :
                            (
                                ((testRowObject["openDatetime"] !== null)
                                    && (new Date(Date.now()).getTime() < new Date(testRowObject["openDatetime"]).getTime())) ?
                                    // –ï—Å–ª–∏ —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è
                                    testsStatuses.availableInTime :
                                    (
                                        ((testRowObject["closeDatetime"] !== null)
                                            && (new Date(Date.now()).getTime() < new Date(testRowObject["closeDatetime"]).getTime())) ?
                                            // –ï—Å–ª–∏ —Ç–µ—Å—Ç –µ—â—ë –Ω–µ –∑–∞–∫—Ä—ã—Ç:
                                            testsStatuses.available :
                                            // –ï—Å–ª–∏ —Ç–µ—Å—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç:
                                            testsStatuses.notAvailable
                                    )
                            )
                    )
            )
        )
    );

    testRowObject._status = _status;

    $("#availableTests tbody").append(
        $("<tr class='testRow'>")
            .append(
                $("<th scope='row'>").text(testRowObject["name"])
            )
            .append(
                $("<th>").text(testRowObject._status.text)
            )
            .append(
                $("<th>").text(testRowObject["openDatetime"] !== null ? testRowObject["openDatetime"] : "-")
            )
            .append(
                $("<th>").text(testRowObject["closeDatetime"] !== null ? testRowObject["closeDatetime"] : "-")
            )
            .on('click', () => {
                console.log(testRowObject["testId"]);
                showTestInfo(testRowObject);
            })
    );
}

// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—á–∫—É.
function showTestInfo(testRowObject) {
    console.log(testRowObject);
    $("#selectedTestInfo div").remove();
    $("#selectedTestInfo").append(
        $("<div class=\"container border border-dark mb-2 col-xl-8 col-md-12\">")
            .append(
                $("<h1 class=\"text-center\">").text(testRowObject["name"])
            )
            .append(
                $("<div class=\"container border border-dark col-10\">")
                    .append(
                        $("<div class=\"row\">")
                            .append(
                                $("<p>").html(
                                    '–°—Ç–∞—Ç—É—Å: <b>' + testRowObject._status.text + '</b>'
                                )
                            )
                            .append(
                                $("<p>").html(
                                    '–¢–µ—Å—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω: <b>' + testRowObject["creationDatetime"] + '</b>'
                                )
                            )
                            .append(
                                $("<p>").html(
                                    '–¢–µ—Å—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å: <b>' + (testRowObject["openDatetime"] !== null ? testRowObject["openDatetime"] : "-") + '</b>'
                                )
                            )
                            .append(
                                $("<p>").html(
                                    '–¢–µ—Å—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ: <b>' + (testRowObject["closeDatetime"] !== null ? testRowObject["closeDatetime"] : "-") + '</b>'
                                )
                            )
                            .append(
                                $("<p>").html(
                                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Å–¥–∞—á–∏: <b>' + (testRowObject["maxTries"] === "-1" ? "–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ" : testRowObject["maxTries"]) + '</b>'
                                )
                            )
                    )
            )
            .append(
                $("<h2 class=\"text-center\">").text("–í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏")
            )
            .append(
                generateTriesTable(testRowObject["testId"])
            )
            .append(
                $("<h2 class=\"text-center mb-4\">").text("–î–µ–π—Å—Ç–≤–∏—è")
            )
            .append(
                $("<div class=\"container col-10 mb-3 text-center\">")
                    .append(
                        $("<button class=\"btn btn-primary\">").text("–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É")
                    )
            )
    );
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä—É –∑–∞–ø—Ä–æ—Å
async function getTestTries(testId) {
    let data = {form: {}};
    data["form"]["action"] = "getTestTries";
    data["form"]["testId"] = testId;
    console.log(data);
    return postAjax(
        siteURL + '/tests.php',
        data,
        new ConnectException("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ø—Ç—ã–∫–∞—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞!")
    );
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function asyncGetTriesTable(testId) {
    return new Promise(async (resolve, reject) => {
        let msg = await getTestTries(testId);
        console.log(msg);
        if (msg["success"]) {
            if (!msg["error"]) {
                resolve(msg["testTries"]);
            } else {
                reject(msg["errorText"]);
            }
        } else {
            reject("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!")
        }
    });
}

// –ü–æ–ª—É—á–∞–µ—Ç float –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0,1]. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å emoji –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏.
function getScoreText(score) {
    let percent = score * 100;
    percent = Math.round(percent);
    for (let i = 0; i < scoreRanges.ranges.length; i++) {
        if (percent === scoreRanges.ranges[i]) {
            return (scoreRanges[scoreRanges.ranges[i]].concat(percent.toString()).concat('%'));
        } else if (percent <= scoreRanges.ranges[i]) {
            return (scoreRanges[scoreRanges.ranges[i - 1]].concat(percent.toString()).concat('%'));
        }
    }
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç jQuery, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.
// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è async-–æ–º.
function generateTriesTable(testId) {
    let tbody = $("<tbody>");

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–º–æ—â—å—é async
    asyncGetTriesTable(testId).then(
        testTries => {
            if (testTries.length > 0) {
                // –ï—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞...
                testTries.forEach(
                    testTry => {
                        // –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
                        tbody.append(
                            $("<tr>")
                                .append(
                                    // –ù–æ–º–µ—Ä —Ç–µ—Å—Ç–∞
                                    $("<th scope=\"row\">").text(testTry["try"])
                                )
                                .append(
                                    // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                                    $("<td>").text(testTry["startedDatetime"])
                                )
                                .append(
                                    // –û—Ü–µ–Ω–∫–∞ —Ç–µ—Å–∏—Ä–æ–≤–∞–Ω–∏—è
                                    $("<td>").text(
                                        (testTry["finished"] === "1" ?
                                                // –ï—Å–ª–∏ —Ç–µ—Å—Ç –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω:
                                                getScoreText(parseFloat(testTry["score"]))
                                                :
                                                // –ï—Å–ª–∏ —Ç–µ—Å—Ç –µ—â—ë –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ:
                                                "-"
                                        ))
                                )
                                .append(
                                    // –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                    $("<td>").text(
                                        (testTry["finished"] === "1" ?
                                                // –ï—Å–ª–∏ —Ç–µ—Å—Ç –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω:
                                                triesStasuses.completed.text
                                                :
                                                // –ï—Å–ª–∏ —Ç–µ—Å—Ç –µ—â—ë –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ:
                                                triesStasuses.inProgress.text
                                        ))
                                )
                                .append(
                                    // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å"/"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
                                    $("<td>").append(
                                        (testTry["finished"] === "1" ?
                                                // –ï—Å–ª–∏ —Ç–µ—Å—Ç –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω:
                                                $("<button class=\"btn btn-outline-secondary\">").data("try", testTry["try"]).text("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
                                                :
                                                // –ï—Å–ª–∏ —Ç–µ—Å—Ç –µ—â—ë –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ:
                                                $("<button class=\"btn btn-primary\">").data("try", testTry["try"]).text("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
                                        )
                                    )
                                )
                        )
                        ;
                    });
            } else {
                // –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ...
                tbody.append(
                    $("<tr>")
                        .append(
                            $("<td colspan='5' class='text-center'>").text("–í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –¥–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç.")
                        )
                );
            }
        }
    ).catch(e => console.log(e));

    return $("<table id=\"testTries\" class=\"table\">")
        .append(
            $("<thead>").html('<tr>' +
                '<th scope="col">–ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏</th>' +
                '<th scope="col">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</th>' +
                '<th scope="col">–û—Ü–µ–Ω–∫–∞</th>' +
                '<th scope="col">–°—Ç–∞—Ç—É—Å</th>' +
                '<th scope="col">–î–µ–π—Å—Ç–≤–∏–µ</th>' +
                '</tr>')
        )
        .append(tbody)
}